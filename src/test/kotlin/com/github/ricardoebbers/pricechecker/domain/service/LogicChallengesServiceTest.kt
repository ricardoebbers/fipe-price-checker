package com.github.ricardoebbers.pricechecker.domain.service

import com.github.ricardoebbers.pricechecker.domain.enums.MoneyBill
import com.github.ricardoebbers.pricechecker.domain.service.impl.LogicChallengesServiceImpl
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.CsvSource
import java.math.BigInteger

internal class LogicChallengesServiceTest {

    private val service = LogicChallengesServiceImpl()

    @ParameterizedTest
    @CsvSource(value = [
        "0:0",
        "1:1",
        "2:1",
        "3:2",
        "4:3",
        "5:5",
        "6:8",
        "50:12586269025",
        "500:139423224561697880139724382870407283950070256587697307264108962948325571622863290691557658876222521294125",
        "1000:43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875",
        "2000:4224696333392304878706725602341482782579852840250681098010280137314308584370130707224123599639141511088446087538909603607640194711643596029271983312598737326253555802606991585915229492453904998722256795316982874482472992263901833716778060607011615497886719879858311468870876264597369086722884023654422295243347964480139515349562972087652656069529806499841977448720155612802665404554171717881930324025204312082516817125",
        "3000:410615886307971260333568378719267105220125108637369252408885430926905584274113403731330491660850044560830036835706942274588569362145476502674373045446852160486606292497360503469773453733196887405847255290082049086907512622059054542195889758031109222670849274793859539133318371244795543147611073276240066737934085191731810993201706776838934766764778739502174470268627820918553842225858306408301661862900358266857238210235802504351951472997919676524004784236376453347268364152648346245840573214241419937917242918602639810097866942392015404620153818671425739835074851396421139982713640679581178458198658692285968043243656709796000",
        "4000:39909473435004422792081248094960912600792570982820257852628876326523051818641373433549136769424132442293969306537520118273879628025443235370362250955435654171592897966790864814458223141914272590897468472180370639695334449662650312874735560926298246249404168309064214351044459077749425236777660809226095151852052781352975449482565838369809183771787439660825140502824343131911711296392457138867486593923544177893735428602238212249156564631452507658603400012003685322984838488962351492632577755354452904049241294565662519417235020049873873878602731379207893212335423484873469083054556329894167262818692599815209582517277965059068235543139459375028276851221435815957374273143824422909416395375178739268544368126894240979135322176080374780998010657710775625856041594078495411724236560242597759185543824798332467919613598667003025993715274875",
        "5000:3878968454388325633701916308325905312082127714646245106160597214895550139044037097010822916462210669479293452858882973813483102008954982940361430156911478938364216563944106910214505634133706558656238254656700712525929903854933813928836378347518908762970712033337052923107693008518093849801803847813996748881765554653788291644268912980384613778969021502293082475666346224923071883324803280375039130352903304505842701147635242270210934637699104006714174883298422891491273104054328753298044273676822977244987749874555691907703880637046832794811358973739993110106219308149018570815397854379195305617510761053075688783766033667355445258844886241619210553457493675897849027988234351023599844663934853256411952221859563060475364645470760330902420806382584929156452876291575759142343809142302917491088984155209854432486594079793571316841692868039545309545388698114665082066862897420639323438488465240988742395873801976993820317174208932265468879364002630797780058759129671389634214252579116872755600360311370547754724604639987588046985178408674382863125"
    ], delimiter = ':')
    fun fibonacciNthNumber_zeroOrPositiveN(n: Int, expected: BigInteger) {
        assertEquals(expected, service.fibonacciNthNumber(n))
    }

    @Test
    fun fibonacciNthNumber_negativeN() {
        assertEquals(BigInteger.ZERO, service.fibonacciNthNumber(-10))
    }

    @ParameterizedTest
    @CsvSource(value = [
        "100:[1,0,0,0,0,0,0]",
        "200:[2,0,0,0,0,0,0]",
        "188:[1,1,1,1,1,1,1]"
    ], delimiter = ':')
    fun leastMoneyBillChange_whenPositive(change: Int, expectedBillsQty: String) {
        val result = service.leastMoneyBillChange(change)
        val moneyBills = splitStringToIntList(expectedBillsQty)
        assertEquals(change, result.map { it.key.faceValue * it.value }.sum())
        assertEquals(moneyBills[0], result.getOrDefault(MoneyBill.HUNDRED, 0))
        assertEquals(moneyBills[1], result.getOrDefault(MoneyBill.FIFTY, 0))
        assertEquals(moneyBills[2], result.getOrDefault(MoneyBill.TWENTY, 0))
        assertEquals(moneyBills[3], result.getOrDefault(MoneyBill.TEN, 0))
        assertEquals(moneyBills[4], result.getOrDefault(MoneyBill.FIVE, 0))
        assertEquals(moneyBills[5], result.getOrDefault(MoneyBill.TWO, 0))
        assertEquals(moneyBills[6], result.getOrDefault(MoneyBill.ONE, 0))
    }

    @Test
    fun leastMoneyBillChange_whenNegative() {
        val change = -188
        val result = service.leastMoneyBillChange(change)
        assertEquals(0, result.map { it.key.faceValue * it.value }.sum())
    }

    @ParameterizedTest
    @CsvSource(value = [
        "20:[6,2,7,0,5,8,4]",
        "20:[1,2,3,4,5,6,7,8,9]",
        "0:[1,1,1,1,1,1,1]"
    ], delimiter = ':')
    fun sumEvenNumbers(expected: Int, sequence: String) {
        val result = service.sumEvenNumbers(splitStringToIntList(sequence))
        assertEquals(expected, result)
    }

    private fun splitStringToIntList(expectedBillsQty: String): List<Int> {
        return expectedBillsQty
                .split("[", ",", "]")
                .filter { it.isNotBlank() }
                .map { it.trim().toInt() }
                .toList()
    }
}
